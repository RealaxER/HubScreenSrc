// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `typedef.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Led_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Led_t {
    // message fields
    // @@protoc_insertion_point(field:Led_t.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Led_t.mac)
    pub mac: u64,
    // @@protoc_insertion_point(field:Led_t.ep)
    pub ep: u32,
    // @@protoc_insertion_point(field:Led_t.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Led_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Led_t {
    fn default() -> &'a Led_t {
        <Led_t as ::protobuf::Message>::default_instance()
    }
}

impl Led_t {
    pub fn new() -> Led_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Led_t| { &m.name },
            |m: &mut Led_t| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac",
            |m: &Led_t| { &m.mac },
            |m: &mut Led_t| { &mut m.mac },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ep",
            |m: &Led_t| { &m.ep },
            |m: &mut Led_t| { &mut m.ep },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Led_t| { &m.status },
            |m: &mut Led_t| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Led_t>(
            "Led_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Led_t {
    const NAME: &'static str = "Led_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                130 => {
                    self.name = is.read_string()?;
                },
                136 => {
                    self.mac = is.read_uint64()?;
                },
                144 => {
                    self.ep = is.read_uint32()?;
                },
                152 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.name);
        }
        if self.mac != 0 {
            my_size += ::protobuf::rt::uint64_size(17, self.mac);
        }
        if self.ep != 0 {
            my_size += ::protobuf::rt::uint32_size(18, self.ep);
        }
        if self.status != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(16, &self.name)?;
        }
        if self.mac != 0 {
            os.write_uint64(17, self.mac)?;
        }
        if self.ep != 0 {
            os.write_uint32(18, self.ep)?;
        }
        if self.status != false {
            os.write_bool(19, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Led_t {
        Led_t::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.mac = 0;
        self.ep = 0;
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Led_t {
        static instance: Led_t = Led_t {
            name: ::std::string::String::new(),
            mac: 0,
            ep: 0,
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Led_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Led_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Led_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Led_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Sync_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sync_t {
    // message fields
    // @@protoc_insertion_point(field:Sync_t.add)
    pub add: bool,
    // @@protoc_insertion_point(field:Sync_t.remove)
    pub remove: bool,
    // @@protoc_insertion_point(field:Sync_t.sync)
    pub sync: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Sync_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sync_t {
    fn default() -> &'a Sync_t {
        <Sync_t as ::protobuf::Message>::default_instance()
    }
}

impl Sync_t {
    pub fn new() -> Sync_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "add",
            |m: &Sync_t| { &m.add },
            |m: &mut Sync_t| { &mut m.add },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remove",
            |m: &Sync_t| { &m.remove },
            |m: &mut Sync_t| { &mut m.remove },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sync",
            |m: &Sync_t| { &m.sync },
            |m: &mut Sync_t| { &mut m.sync },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sync_t>(
            "Sync_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sync_t {
    const NAME: &'static str = "Sync_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                128 => {
                    self.add = is.read_bool()?;
                },
                136 => {
                    self.remove = is.read_bool()?;
                },
                144 => {
                    self.sync = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.add != false {
            my_size += 2 + 1;
        }
        if self.remove != false {
            my_size += 2 + 1;
        }
        if self.sync != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.add != false {
            os.write_bool(16, self.add)?;
        }
        if self.remove != false {
            os.write_bool(17, self.remove)?;
        }
        if self.sync != false {
            os.write_bool(18, self.sync)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sync_t {
        Sync_t::new()
    }

    fn clear(&mut self) {
        self.add = false;
        self.remove = false;
        self.sync = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sync_t {
        static instance: Sync_t = Sync_t {
            add: false,
            remove: false,
            sync: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sync_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sync_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sync_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sync_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Sw_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sw_t {
    // message fields
    // @@protoc_insertion_point(field:Sw_t.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Sw_t.ep)
    pub ep: u32,
    // @@protoc_insertion_point(field:Sw_t.mac)
    pub mac: u64,
    // @@protoc_insertion_point(field:Sw_t.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Sw_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sw_t {
    fn default() -> &'a Sw_t {
        <Sw_t as ::protobuf::Message>::default_instance()
    }
}

impl Sw_t {
    pub fn new() -> Sw_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Sw_t| { &m.name },
            |m: &mut Sw_t| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ep",
            |m: &Sw_t| { &m.ep },
            |m: &mut Sw_t| { &mut m.ep },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac",
            |m: &Sw_t| { &m.mac },
            |m: &mut Sw_t| { &mut m.mac },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Sw_t| { &m.status },
            |m: &mut Sw_t| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sw_t>(
            "Sw_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sw_t {
    const NAME: &'static str = "Sw_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                130 => {
                    self.name = is.read_string()?;
                },
                136 => {
                    self.ep = is.read_uint32()?;
                },
                144 => {
                    self.mac = is.read_uint64()?;
                },
                152 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.name);
        }
        if self.ep != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.ep);
        }
        if self.mac != 0 {
            my_size += ::protobuf::rt::uint64_size(18, self.mac);
        }
        if self.status != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(16, &self.name)?;
        }
        if self.ep != 0 {
            os.write_uint32(17, self.ep)?;
        }
        if self.mac != 0 {
            os.write_uint64(18, self.mac)?;
        }
        if self.status != false {
            os.write_bool(19, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sw_t {
        Sw_t::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.ep = 0;
        self.mac = 0;
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sw_t {
        static instance: Sw_t = Sw_t {
            name: ::std::string::String::new(),
            ep: 0,
            mac: 0,
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sw_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sw_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sw_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sw_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Ota_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Ota_t {
    // message fields
    // @@protoc_insertion_point(field:Ota_t.check_ota)
    pub check_ota: bool,
    // @@protoc_insertion_point(field:Ota_t.status)
    pub status: bool,
    // @@protoc_insertion_point(field:Ota_t.ack)
    pub ack: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Ota_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Ota_t {
    fn default() -> &'a Ota_t {
        <Ota_t as ::protobuf::Message>::default_instance()
    }
}

impl Ota_t {
    pub fn new() -> Ota_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "check_ota",
            |m: &Ota_t| { &m.check_ota },
            |m: &mut Ota_t| { &mut m.check_ota },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Ota_t| { &m.status },
            |m: &mut Ota_t| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack",
            |m: &Ota_t| { &m.ack },
            |m: &mut Ota_t| { &mut m.ack },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Ota_t>(
            "Ota_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Ota_t {
    const NAME: &'static str = "Ota_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                128 => {
                    self.check_ota = is.read_bool()?;
                },
                136 => {
                    self.status = is.read_bool()?;
                },
                144 => {
                    self.ack = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.check_ota != false {
            my_size += 2 + 1;
        }
        if self.status != false {
            my_size += 2 + 1;
        }
        if self.ack != false {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.check_ota != false {
            os.write_bool(16, self.check_ota)?;
        }
        if self.status != false {
            os.write_bool(17, self.status)?;
        }
        if self.ack != false {
            os.write_bool(18, self.ack)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Ota_t {
        Ota_t::new()
    }

    fn clear(&mut self) {
        self.check_ota = false;
        self.status = false;
        self.ack = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Ota_t {
        static instance: Ota_t = Ota_t {
            check_ota: false,
            status: false,
            ack: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Ota_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Ota_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Ota_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ota_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:KeepAlive_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeepAlive_t {
    // message fields
    // @@protoc_insertion_point(field:KeepAlive_t.sender)
    pub sender: ::protobuf::EnumOrUnknown<User_t>,
    // special fields
    // @@protoc_insertion_point(special_field:KeepAlive_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeepAlive_t {
    fn default() -> &'a KeepAlive_t {
        <KeepAlive_t as ::protobuf::Message>::default_instance()
    }
}

impl KeepAlive_t {
    pub fn new() -> KeepAlive_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &KeepAlive_t| { &m.sender },
            |m: &mut KeepAlive_t| { &mut m.sender },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeepAlive_t>(
            "KeepAlive_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeepAlive_t {
    const NAME: &'static str = "KeepAlive_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sender = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.sender != ::protobuf::EnumOrUnknown::new(User_t::App) {
            my_size += ::protobuf::rt::int32_size(1, self.sender.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.sender != ::protobuf::EnumOrUnknown::new(User_t::App) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.sender))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeepAlive_t {
        KeepAlive_t::new()
    }

    fn clear(&mut self) {
        self.sender = ::protobuf::EnumOrUnknown::new(User_t::App);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeepAlive_t {
        static instance: KeepAlive_t = KeepAlive_t {
            sender: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeepAlive_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeepAlive_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeepAlive_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeepAlive_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Timer_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Timer_t {
    // message fields
    // @@protoc_insertion_point(field:Timer_t.day)
    pub day: u32,
    // @@protoc_insertion_point(field:Timer_t.month)
    pub month: u32,
    // @@protoc_insertion_point(field:Timer_t.hour)
    pub hour: u32,
    // @@protoc_insertion_point(field:Timer_t.minute)
    pub minute: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Timer_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Timer_t {
    fn default() -> &'a Timer_t {
        <Timer_t as ::protobuf::Message>::default_instance()
    }
}

impl Timer_t {
    pub fn new() -> Timer_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "day",
            |m: &Timer_t| { &m.day },
            |m: &mut Timer_t| { &mut m.day },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "month",
            |m: &Timer_t| { &m.month },
            |m: &mut Timer_t| { &mut m.month },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hour",
            |m: &Timer_t| { &m.hour },
            |m: &mut Timer_t| { &mut m.hour },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "minute",
            |m: &Timer_t| { &m.minute },
            |m: &mut Timer_t| { &mut m.minute },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Timer_t>(
            "Timer_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Timer_t {
    const NAME: &'static str = "Timer_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                120 => {
                    self.day = is.read_uint32()?;
                },
                128 => {
                    self.month = is.read_uint32()?;
                },
                136 => {
                    self.hour = is.read_uint32()?;
                },
                144 => {
                    self.minute = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.day != 0 {
            my_size += ::protobuf::rt::uint32_size(15, self.day);
        }
        if self.month != 0 {
            my_size += ::protobuf::rt::uint32_size(16, self.month);
        }
        if self.hour != 0 {
            my_size += ::protobuf::rt::uint32_size(17, self.hour);
        }
        if self.minute != 0 {
            my_size += ::protobuf::rt::uint32_size(18, self.minute);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.day != 0 {
            os.write_uint32(15, self.day)?;
        }
        if self.month != 0 {
            os.write_uint32(16, self.month)?;
        }
        if self.hour != 0 {
            os.write_uint32(17, self.hour)?;
        }
        if self.minute != 0 {
            os.write_uint32(18, self.minute)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Timer_t {
        Timer_t::new()
    }

    fn clear(&mut self) {
        self.day = 0;
        self.month = 0;
        self.hour = 0;
        self.minute = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Timer_t {
        static instance: Timer_t = Timer_t {
            day: 0,
            month: 0,
            hour: 0,
            minute: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Timer_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Timer_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Timer_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Timer_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Buffer)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Buffer {
    // message fields
    // @@protoc_insertion_point(field:Buffer.mac_hub)
    pub mac_hub: ::std::string::String,
    // @@protoc_insertion_point(field:Buffer.sender)
    pub sender: ::protobuf::EnumOrUnknown<User_t>,
    // @@protoc_insertion_point(field:Buffer.receiver)
    pub receiver: ::protobuf::EnumOrUnknown<User_t>,
    // @@protoc_insertion_point(field:Buffer.cotroller)
    pub cotroller: ::protobuf::EnumOrUnknown<User_t>,
    // @@protoc_insertion_point(field:Buffer.sync)
    pub sync: ::protobuf::MessageField<Sync_t>,
    // @@protoc_insertion_point(field:Buffer.ota)
    pub ota: ::protobuf::MessageField<Ota_t>,
    // @@protoc_insertion_point(field:Buffer.vpn)
    pub vpn: ::protobuf::MessageField<Vpn_t>,
    // @@protoc_insertion_point(field:Buffer.led)
    pub led: ::std::vec::Vec<Led_t>,
    // @@protoc_insertion_point(field:Buffer.sw)
    pub sw: ::std::vec::Vec<Sw_t>,
    // @@protoc_insertion_point(field:Buffer.time)
    pub time: ::protobuf::MessageField<Timer_t>,
    // special fields
    // @@protoc_insertion_point(special_field:Buffer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Buffer {
    fn default() -> &'a Buffer {
        <Buffer as ::protobuf::Message>::default_instance()
    }
}

impl Buffer {
    pub fn new() -> Buffer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac_hub",
            |m: &Buffer| { &m.mac_hub },
            |m: &mut Buffer| { &mut m.mac_hub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &Buffer| { &m.sender },
            |m: &mut Buffer| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receiver",
            |m: &Buffer| { &m.receiver },
            |m: &mut Buffer| { &mut m.receiver },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cotroller",
            |m: &Buffer| { &m.cotroller },
            |m: &mut Buffer| { &mut m.cotroller },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Sync_t>(
            "sync",
            |m: &Buffer| { &m.sync },
            |m: &mut Buffer| { &mut m.sync },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Ota_t>(
            "ota",
            |m: &Buffer| { &m.ota },
            |m: &mut Buffer| { &mut m.ota },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vpn_t>(
            "vpn",
            |m: &Buffer| { &m.vpn },
            |m: &mut Buffer| { &mut m.vpn },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "led",
            |m: &Buffer| { &m.led },
            |m: &mut Buffer| { &mut m.led },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sw",
            |m: &Buffer| { &m.sw },
            |m: &mut Buffer| { &mut m.sw },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Timer_t>(
            "time",
            |m: &Buffer| { &m.time },
            |m: &mut Buffer| { &mut m.time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Buffer>(
            "Buffer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Buffer {
    const NAME: &'static str = "Buffer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mac_hub = is.read_string()?;
                },
                16 => {
                    self.sender = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.receiver = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.cotroller = is.read_enum_or_unknown()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sync)?;
                },
                130 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ota)?;
                },
                138 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.vpn)?;
                },
                146 => {
                    self.led.push(is.read_message()?);
                },
                154 => {
                    self.sw.push(is.read_message()?);
                },
                162 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mac_hub.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mac_hub);
        }
        if self.sender != ::protobuf::EnumOrUnknown::new(User_t::App) {
            my_size += ::protobuf::rt::int32_size(2, self.sender.value());
        }
        if self.receiver != ::protobuf::EnumOrUnknown::new(User_t::App) {
            my_size += ::protobuf::rt::int32_size(3, self.receiver.value());
        }
        if self.cotroller != ::protobuf::EnumOrUnknown::new(User_t::App) {
            my_size += ::protobuf::rt::int32_size(4, self.cotroller.value());
        }
        if let Some(v) = self.sync.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ota.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.vpn.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.led {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.sw {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mac_hub.is_empty() {
            os.write_string(1, &self.mac_hub)?;
        }
        if self.sender != ::protobuf::EnumOrUnknown::new(User_t::App) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.sender))?;
        }
        if self.receiver != ::protobuf::EnumOrUnknown::new(User_t::App) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.receiver))?;
        }
        if self.cotroller != ::protobuf::EnumOrUnknown::new(User_t::App) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.cotroller))?;
        }
        if let Some(v) = self.sync.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.ota.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        if let Some(v) = self.vpn.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
        }
        for v in &self.led {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        };
        for v in &self.sw {
            ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
        };
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Buffer {
        Buffer::new()
    }

    fn clear(&mut self) {
        self.mac_hub.clear();
        self.sender = ::protobuf::EnumOrUnknown::new(User_t::App);
        self.receiver = ::protobuf::EnumOrUnknown::new(User_t::App);
        self.cotroller = ::protobuf::EnumOrUnknown::new(User_t::App);
        self.sync.clear();
        self.ota.clear();
        self.vpn.clear();
        self.led.clear();
        self.sw.clear();
        self.time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Buffer {
        static instance: Buffer = Buffer {
            mac_hub: ::std::string::String::new(),
            sender: ::protobuf::EnumOrUnknown::from_i32(0),
            receiver: ::protobuf::EnumOrUnknown::from_i32(0),
            cotroller: ::protobuf::EnumOrUnknown::from_i32(0),
            sync: ::protobuf::MessageField::none(),
            ota: ::protobuf::MessageField::none(),
            vpn: ::protobuf::MessageField::none(),
            led: ::std::vec::Vec::new(),
            sw: ::std::vec::Vec::new(),
            time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Buffer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Buffer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Buffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Buffer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Vpn_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vpn_t {
    // message fields
    // @@protoc_insertion_point(field:Vpn_t.status)
    pub status: bool,
    // @@protoc_insertion_point(field:Vpn_t.mac)
    pub mac: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Vpn_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vpn_t {
    fn default() -> &'a Vpn_t {
        <Vpn_t as ::protobuf::Message>::default_instance()
    }
}

impl Vpn_t {
    pub fn new() -> Vpn_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Vpn_t| { &m.status },
            |m: &mut Vpn_t| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac",
            |m: &Vpn_t| { &m.mac },
            |m: &mut Vpn_t| { &mut m.mac },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vpn_t>(
            "Vpn_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vpn_t {
    const NAME: &'static str = "Vpn_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_bool()?;
                },
                18 => {
                    self.mac = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 1 + 1;
        }
        if !self.mac.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mac);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        if !self.mac.is_empty() {
            os.write_string(2, &self.mac)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vpn_t {
        Vpn_t::new()
    }

    fn clear(&mut self) {
        self.status = false;
        self.mac.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vpn_t {
        static instance: Vpn_t = Vpn_t {
            status: false,
            mac: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vpn_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vpn_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vpn_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vpn_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Vendor_t)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vendor_t {
    // message fields
    // @@protoc_insertion_point(field:Vendor_t.mac_ven)
    pub mac_ven: ::std::string::String,
    // @@protoc_insertion_point(field:Vendor_t.data)
    pub data: ::std::string::String,
    // @@protoc_insertion_point(field:Vendor_t.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Vendor_t.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vendor_t {
    fn default() -> &'a Vendor_t {
        <Vendor_t as ::protobuf::Message>::default_instance()
    }
}

impl Vendor_t {
    pub fn new() -> Vendor_t {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac_ven",
            |m: &Vendor_t| { &m.mac_ven },
            |m: &mut Vendor_t| { &mut m.mac_ven },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Vendor_t| { &m.data },
            |m: &mut Vendor_t| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Vendor_t| { &m.status },
            |m: &mut Vendor_t| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vendor_t>(
            "Vendor_t",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vendor_t {
    const NAME: &'static str = "Vendor_t";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mac_ven = is.read_string()?;
                },
                18 => {
                    self.data = is.read_string()?;
                },
                24 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mac_ven.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mac_ven);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.data);
        }
        if self.status != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mac_ven.is_empty() {
            os.write_string(1, &self.mac_ven)?;
        }
        if !self.data.is_empty() {
            os.write_string(2, &self.data)?;
        }
        if self.status != false {
            os.write_bool(3, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vendor_t {
        Vendor_t::new()
    }

    fn clear(&mut self) {
        self.mac_ven.clear();
        self.data.clear();
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vendor_t {
        static instance: Vendor_t = Vendor_t {
            mac_ven: ::std::string::String::new(),
            data: ::std::string::String::new(),
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vendor_t {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vendor_t").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vendor_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vendor_t {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:User_t)
pub enum User_t {
    // @@protoc_insertion_point(enum_value:User_t.App)
    App = 0,
    // @@protoc_insertion_point(enum_value:User_t.Server)
    Server = 1,
    // @@protoc_insertion_point(enum_value:User_t.Hub)
    Hub = 2,
    // @@protoc_insertion_point(enum_value:User_t.Zigbee)
    Zigbee = 3,
    // @@protoc_insertion_point(enum_value:User_t.Ble)
    Ble = 4,
    // @@protoc_insertion_point(enum_value:User_t.Ai)
    Ai = 5,
    // @@protoc_insertion_point(enum_value:User_t.Wifi)
    Wifi = 6,
    // @@protoc_insertion_point(enum_value:User_t.Screen)
    Screen = 7,
    // @@protoc_insertion_point(enum_value:User_t.Ota)
    Ota = 8,
}

impl ::protobuf::Enum for User_t {
    const NAME: &'static str = "User_t";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<User_t> {
        match value {
            0 => ::std::option::Option::Some(User_t::App),
            1 => ::std::option::Option::Some(User_t::Server),
            2 => ::std::option::Option::Some(User_t::Hub),
            3 => ::std::option::Option::Some(User_t::Zigbee),
            4 => ::std::option::Option::Some(User_t::Ble),
            5 => ::std::option::Option::Some(User_t::Ai),
            6 => ::std::option::Option::Some(User_t::Wifi),
            7 => ::std::option::Option::Some(User_t::Screen),
            8 => ::std::option::Option::Some(User_t::Ota),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<User_t> {
        match str {
            "App" => ::std::option::Option::Some(User_t::App),
            "Server" => ::std::option::Option::Some(User_t::Server),
            "Hub" => ::std::option::Option::Some(User_t::Hub),
            "Zigbee" => ::std::option::Option::Some(User_t::Zigbee),
            "Ble" => ::std::option::Option::Some(User_t::Ble),
            "Ai" => ::std::option::Option::Some(User_t::Ai),
            "Wifi" => ::std::option::Option::Some(User_t::Wifi),
            "Screen" => ::std::option::Option::Some(User_t::Screen),
            "Ota" => ::std::option::Option::Some(User_t::Ota),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [User_t] = &[
        User_t::App,
        User_t::Server,
        User_t::Hub,
        User_t::Zigbee,
        User_t::Ble,
        User_t::Ai,
        User_t::Wifi,
        User_t::Screen,
        User_t::Ota,
    ];
}

impl ::protobuf::EnumFull for User_t {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("User_t").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for User_t {
    fn default() -> Self {
        User_t::App
    }
}

impl User_t {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<User_t>("User_t")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rtypedef.proto\"U\n\x05Led_t\x12\x12\n\x04name\x18\x10\x20\x01(\tR\
    \x04name\x12\x10\n\x03mac\x18\x11\x20\x01(\x04R\x03mac\x12\x0e\n\x02ep\
    \x18\x12\x20\x01(\rR\x02ep\x12\x16\n\x06status\x18\x13\x20\x01(\x08R\x06\
    status\"F\n\x06Sync_t\x12\x10\n\x03add\x18\x10\x20\x01(\x08R\x03add\x12\
    \x16\n\x06remove\x18\x11\x20\x01(\x08R\x06remove\x12\x12\n\x04sync\x18\
    \x12\x20\x01(\x08R\x04sync\"T\n\x04Sw_t\x12\x12\n\x04name\x18\x10\x20\
    \x01(\tR\x04name\x12\x0e\n\x02ep\x18\x11\x20\x01(\rR\x02ep\x12\x10\n\x03\
    mac\x18\x12\x20\x01(\x04R\x03mac\x12\x16\n\x06status\x18\x13\x20\x01(\
    \x08R\x06status\"N\n\x05Ota_t\x12\x1b\n\tcheck_ota\x18\x10\x20\x01(\x08R\
    \x08checkOta\x12\x16\n\x06status\x18\x11\x20\x01(\x08R\x06status\x12\x10\
    \n\x03ack\x18\x12\x20\x01(\x08R\x03ack\".\n\x0bKeepAlive_t\x12\x1f\n\x06\
    sender\x18\x01\x20\x01(\x0e2\x07.User_tR\x06sender\"]\n\x07Timer_t\x12\
    \x10\n\x03day\x18\x0f\x20\x01(\rR\x03day\x12\x14\n\x05month\x18\x10\x20\
    \x01(\rR\x05month\x12\x12\n\x04hour\x18\x11\x20\x01(\rR\x04hour\x12\x16\
    \n\x06minute\x18\x12\x20\x01(\rR\x06minute\"\xae\x02\n\x06Buffer\x12\x17\
    \n\x07mac_hub\x18\x01\x20\x01(\tR\x06macHub\x12\x1f\n\x06sender\x18\x02\
    \x20\x01(\x0e2\x07.User_tR\x06sender\x12#\n\x08receiver\x18\x03\x20\x01(\
    \x0e2\x07.User_tR\x08receiver\x12%\n\tcotroller\x18\x04\x20\x01(\x0e2\
    \x07.User_tR\tcotroller\x12\x1b\n\x04sync\x18\x05\x20\x01(\x0b2\x07.Sync\
    _tR\x04sync\x12\x18\n\x03ota\x18\x10\x20\x01(\x0b2\x06.Ota_tR\x03ota\x12\
    \x18\n\x03vpn\x18\x11\x20\x01(\x0b2\x06.Vpn_tR\x03vpn\x12\x18\n\x03led\
    \x18\x12\x20\x03(\x0b2\x06.Led_tR\x03led\x12\x15\n\x02sw\x18\x13\x20\x03\
    (\x0b2\x05.Sw_tR\x02sw\x12\x1c\n\x04time\x18\x14\x20\x01(\x0b2\x08.Timer\
    _tR\x04time\"1\n\x05Vpn_t\x12\x16\n\x06status\x18\x01\x20\x01(\x08R\x06s\
    tatus\x12\x10\n\x03mac\x18\x02\x20\x01(\tR\x03mac\"O\n\x08Vendor_t\x12\
    \x17\n\x07mac_ven\x18\x01\x20\x01(\tR\x06macVen\x12\x12\n\x04data\x18\
    \x02\x20\x01(\tR\x04data\x12\x16\n\x06status\x18\x03\x20\x01(\x08R\x06st\
    atus*b\n\x06User_t\x12\x07\n\x03App\x10\0\x12\n\n\x06Server\x10\x01\x12\
    \x07\n\x03Hub\x10\x02\x12\n\n\x06Zigbee\x10\x03\x12\x07\n\x03Ble\x10\x04\
    \x12\x06\n\x02Ai\x10\x05\x12\x08\n\x04Wifi\x10\x06\x12\n\n\x06Screen\x10\
    \x07\x12\x07\n\x03Ota\x10\x08J\xfc\x17\n\x06\x12\x04\0\0L\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x03\0\x08\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x03\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\x04\x15\
    \n\r\n\x05\x04\0\x02\0\x04\x12\x04\x04\x04\x03\x0e\n\x0c\n\x05\x04\0\x02\
    \0\x05\x12\x03\x04\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x0b\x0f\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x04\x12\x14\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x05\x04\x14\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x05\x04\x04\
    \x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x05\x0b\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x05\x11\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x04\x13\n\r\n\x05\x04\
    \0\x02\x02\x04\x12\x04\x06\x04\x05\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x06\x0b\r\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x06\x10\x12\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x07\x04\x15\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x07\x04\x06\x13\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x07\x04\x08\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x07\t\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x07\x12\
    \x14\n\n\n\x02\x04\x01\x12\x04\n\0\x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \n\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x04\x12\n\r\n\x05\x04\
    \x01\x02\0\x04\x12\x04\x0b\x04\n\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x0b\x04\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\t\x0c\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0b\x0f\x11\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x0c\x04\x15\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x0c\x04\x0b\
    \x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0c\x04\x08\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x0c\t\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x0c\x12\x14\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\r\x04\x13\n\r\n\x05\
    \x04\x01\x02\x02\x04\x12\x04\r\x04\x0c\x15\n\x0c\n\x05\x04\x01\x02\x02\
    \x05\x12\x03\r\x04\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\r\t\r\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\r\x10\x12\n\n\n\x02\x04\x02\x12\
    \x04\x10\0\x15\x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\x0c\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x11\x04\x15\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\
    \x11\x04\x10\r\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x11\x04\n\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x11\x0b\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x11\x12\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x12\x04\x13\n\r\
    \n\x05\x04\x02\x02\x01\x04\x12\x04\x12\x04\x11\x15\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03\x12\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\
    \x12\x0b\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x12\x10\x12\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03\x13\x04\x14\n\r\n\x05\x04\x02\x02\x02\x04\
    \x12\x04\x13\x04\x12\x13\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x13\x04\
    \n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x13\x0b\x0e\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03\x13\x11\x13\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\
    \x14\x04\x15\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04\x14\x04\x13\x14\n\x0c\
    \n\x05\x04\x02\x02\x03\x05\x12\x03\x14\x04\x08\n\x0c\n\x05\x04\x02\x02\
    \x03\x01\x12\x03\x14\t\x0f\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x14\
    \x12\x14\n\n\n\x02\x04\x03\x12\x04\x17\0\x1b\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03\x17\x08\r\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x18\x04\x18\n\r\n\
    \x05\x04\x03\x02\0\x04\x12\x04\x18\x04\x17\x0f\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03\x18\x04\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x18\t\x12\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x18\x15\x17\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x03\x19\x04\x15\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x19\
    \x04\x18\x18\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x19\x04\x08\n\x0c\n\
    \x05\x04\x03\x02\x01\x01\x12\x03\x19\t\x0f\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03\x19\x12\x14\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x1a\x04\x12\
    \n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\x1a\x04\x19\x15\n\x0c\n\x05\x04\
    \x03\x02\x02\x05\x12\x03\x1a\x04\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\
    \x03\x1a\t\x0c\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1a\x0f\x11\n\n\n\
    \x02\x04\x04\x12\x04\x1d\0\x1f\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1d\x08\
    \x13\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1e\x04\x16\n\r\n\x05\x04\x04\x02\
    \0\x04\x12\x04\x1e\x04\x1d\x15\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x1e\
    \x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1e\x0b\x11\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03\x1e\x14\x15\n\n\n\x02\x05\0\x12\x04\"\0,\x01\n\n\
    \n\x03\x05\0\x01\x12\x03\"\x05\x0b\n\x0b\n\x04\x05\0\x02\0\x12\x03#\x04\
    \x0c\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03#\x04\x07\n\x0c\n\x05\x05\0\x02\
    \0\x02\x12\x03#\n\x0b\n\x0b\n\x04\x05\0\x02\x01\x12\x03$\x04\x0f\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03$\x04\n\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03$\r\x0e\n\x0b\n\x04\x05\0\x02\x02\x12\x03%\x04\x0c\n\x0c\n\x05\x05\0\
    \x02\x02\x01\x12\x03%\x04\x07\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03%\n\
    \x0b\n\x0b\n\x04\x05\0\x02\x03\x12\x03&\x04\x0f\n\x0c\n\x05\x05\0\x02\
    \x03\x01\x12\x03&\x04\n\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03&\r\x0e\n\
    \x0b\n\x04\x05\0\x02\x04\x12\x03'\x04\x0c\n\x0c\n\x05\x05\0\x02\x04\x01\
    \x12\x03'\x04\x07\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03'\n\x0b\n\x0b\n\
    \x04\x05\0\x02\x05\x12\x03(\x04\x0b\n\x0c\n\x05\x05\0\x02\x05\x01\x12\
    \x03(\x04\x06\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03(\t\n\n\x0b\n\x04\x05\
    \0\x02\x06\x12\x03)\x04\r\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03)\x04\x08\
    \n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03)\x0b\x0c\n\x0b\n\x04\x05\0\x02\
    \x07\x12\x03*\x04\x0f\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03*\x04\n\n\x0c\
    \n\x05\x05\0\x02\x07\x02\x12\x03*\r\x0e\n\x0b\n\x04\x05\0\x02\x08\x12\
    \x03+\x04\x0c\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03+\x04\x07\n\x0c\n\x05\
    \x05\0\x02\x08\x02\x12\x03+\n\x0b\n\n\n\x02\x04\x05\x12\x04.\03\x01\n\n\
    \n\x03\x04\x05\x01\x12\x03.\x08\x0f\n\x0b\n\x04\x04\x05\x02\0\x12\x03/\
    \x04\x13\n\r\n\x05\x04\x05\x02\0\x04\x12\x04/\x04.\x11\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03/\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03/\x0b\
    \x0e\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03/\x10\x12\n\x0b\n\x04\x04\x05\
    \x02\x01\x12\x030\x04\x16\n\r\n\x05\x04\x05\x02\x01\x04\x12\x040\x04/\
    \x13\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x030\x04\n\n\x0c\n\x05\x04\x05\
    \x02\x01\x01\x12\x030\x0b\x10\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x030\
    \x13\x15\n\x0b\n\x04\x04\x05\x02\x02\x12\x031\x04\x15\n\r\n\x05\x04\x05\
    \x02\x02\x04\x12\x041\x040\x16\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x031\
    \x04\n\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x031\x0b\x0f\n\x0c\n\x05\x04\
    \x05\x02\x02\x03\x12\x031\x12\x14\n\x0b\n\x04\x04\x05\x02\x03\x12\x032\
    \x04\x17\n\r\n\x05\x04\x05\x02\x03\x04\x12\x042\x041\x15\n\x0c\n\x05\x04\
    \x05\x02\x03\x05\x12\x032\x04\n\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x032\
    \x0b\x11\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x032\x14\x16\n\n\n\x02\x04\
    \x06\x12\x045\0@\x01\n\n\n\x03\x04\x06\x01\x12\x035\x08\x0e\n\x0b\n\x04\
    \x04\x06\x02\0\x12\x036\x04\x17\n\r\n\x05\x04\x06\x02\0\x04\x12\x046\x04\
    5\x10\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x036\x04\n\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x036\x0b\x12\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x036\x15\
    \x16\n\x1d\n\x04\x04\x06\x02\x01\x12\x037\x04\x16\"\x10\x20ng\xc6\xb0\
    \xe1\xbb\x9di\x20g\xe1\xbb\xadi\n\n\r\n\x05\x04\x06\x02\x01\x04\x12\x047\
    \x046\x17\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x037\x04\n\n\x0c\n\x05\x04\
    \x06\x02\x01\x01\x12\x037\x0b\x11\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\
    \x037\x14\x15\n\x1e\n\x04\x04\x06\x02\x02\x12\x038\x04\x18\"\x11\x20ng\
    \xc6\xb0\xe1\xbb\x9di\x20nh\xe1\xba\xadn\n\n\r\n\x05\x04\x06\x02\x02\x04\
    \x12\x048\x047\x16\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x038\x04\n\n\x0c\
    \n\x05\x04\x06\x02\x02\x01\x12\x038\x0b\x13\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x038\x16\x17\n%\n\x04\x04\x06\x02\x03\x12\x039\x04\x19\"\x18\
    \x20ng\xc6\xb0\xe1\xbb\x9di\x20th\xe1\xbb\xb1c\x20hi\xe1\xbb\x87n\n\n\r\
    \n\x05\x04\x06\x02\x03\x04\x12\x049\x048\x18\n\x0c\n\x05\x04\x06\x02\x03\
    \x06\x12\x039\x04\n\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x039\x0b\x14\n\
    \x0c\n\x05\x04\x06\x02\x03\x03\x12\x039\x17\x18\n\x0b\n\x04\x04\x06\x02\
    \x04\x12\x03:\x04\x14\n\r\n\x05\x04\x06\x02\x04\x04\x12\x04:\x049\x19\n\
    \x0c\n\x05\x04\x06\x02\x04\x06\x12\x03:\x04\n\n\x0c\n\x05\x04\x06\x02\
    \x04\x01\x12\x03:\x0b\x0f\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03:\x12\
    \x13\n\x0b\n\x04\x04\x06\x02\x05\x12\x03;\x04\x13\n\r\n\x05\x04\x06\x02\
    \x05\x04\x12\x04;\x04:\x14\n\x0c\n\x05\x04\x06\x02\x05\x06\x12\x03;\x04\
    \t\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03;\n\r\n\x0c\n\x05\x04\x06\x02\
    \x05\x03\x12\x03;\x10\x12\n\x0b\n\x04\x04\x06\x02\x06\x12\x03<\x04\x13\n\
    \r\n\x05\x04\x06\x02\x06\x04\x12\x04<\x04;\x13\n\x0c\n\x05\x04\x06\x02\
    \x06\x06\x12\x03<\x04\t\n\x0c\n\x05\x04\x06\x02\x06\x01\x12\x03<\n\r\n\
    \x0c\n\x05\x04\x06\x02\x06\x03\x12\x03<\x10\x12\n\x0b\n\x04\x04\x06\x02\
    \x07\x12\x03=\x04\x1c\n\x0c\n\x05\x04\x06\x02\x07\x04\x12\x03=\x04\x0c\n\
    \x0c\n\x05\x04\x06\x02\x07\x06\x12\x03=\r\x12\n\x0c\n\x05\x04\x06\x02\
    \x07\x01\x12\x03=\x13\x16\n\x0c\n\x05\x04\x06\x02\x07\x03\x12\x03=\x19\
    \x1b\n\x0b\n\x04\x04\x06\x02\x08\x12\x03>\x04\x1b\n\x0c\n\x05\x04\x06\
    \x02\x08\x04\x12\x03>\x04\x0c\n\x0c\n\x05\x04\x06\x02\x08\x06\x12\x03>\r\
    \x11\n\x0c\n\x05\x04\x06\x02\x08\x01\x12\x03>\x13\x15\n\x0c\n\x05\x04\
    \x06\x02\x08\x03\x12\x03>\x18\x1a\n\x0b\n\x04\x04\x06\x02\t\x12\x03?\x04\
    \x16\n\r\n\x05\x04\x06\x02\t\x04\x12\x04?\x04>\x1b\n\x0c\n\x05\x04\x06\
    \x02\t\x06\x12\x03?\x04\x0b\n\x0c\n\x05\x04\x06\x02\t\x01\x12\x03?\x0c\
    \x10\n\x0c\n\x05\x04\x06\x02\t\x03\x12\x03?\x13\x15\n\n\n\x02\x04\x07\
    \x12\x04B\0E\x01\n\n\n\x03\x04\x07\x01\x12\x03B\x08\r\n\x0b\n\x04\x04\
    \x07\x02\0\x12\x03C\x04\x14\n\r\n\x05\x04\x07\x02\0\x04\x12\x04C\x04B\
    \x0f\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03C\x04\x08\n\x0c\n\x05\x04\x07\
    \x02\0\x01\x12\x03C\t\x0f\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03C\x12\x13\
    \n\x0b\n\x04\x04\x07\x02\x01\x12\x03D\x04\x13\n\r\n\x05\x04\x07\x02\x01\
    \x04\x12\x04D\x04C\x14\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03D\x04\n\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03D\x0b\x0e\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03D\x11\x12\n\n\n\x02\x04\x08\x12\x04H\0L\x01\n\n\n\x03\
    \x04\x08\x01\x12\x03H\x08\x10\n\x0b\n\x04\x04\x08\x02\0\x12\x03I\x04\x17\
    \n\r\n\x05\x04\x08\x02\0\x04\x12\x04I\x04H\x12\n\x0c\n\x05\x04\x08\x02\0\
    \x05\x12\x03I\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03I\x0b\x12\n\x0c\
    \n\x05\x04\x08\x02\0\x03\x12\x03I\x15\x16\n\x0b\n\x04\x04\x08\x02\x01\
    \x12\x03J\x04\x14\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04J\x04I\x17\n\x0c\
    \n\x05\x04\x08\x02\x01\x05\x12\x03J\x04\n\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x03J\x0b\x0f\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03J\x12\x13\n\
    \x0b\n\x04\x04\x08\x02\x02\x12\x03K\x04\x14\n\r\n\x05\x04\x08\x02\x02\
    \x04\x12\x04K\x04J\x14\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03K\x04\x08\
    \n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03K\t\x0f\n\x0c\n\x05\x04\x08\x02\
    \x02\x03\x12\x03K\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(Led_t::generated_message_descriptor_data());
            messages.push(Sync_t::generated_message_descriptor_data());
            messages.push(Sw_t::generated_message_descriptor_data());
            messages.push(Ota_t::generated_message_descriptor_data());
            messages.push(KeepAlive_t::generated_message_descriptor_data());
            messages.push(Timer_t::generated_message_descriptor_data());
            messages.push(Buffer::generated_message_descriptor_data());
            messages.push(Vpn_t::generated_message_descriptor_data());
            messages.push(Vendor_t::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(User_t::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
