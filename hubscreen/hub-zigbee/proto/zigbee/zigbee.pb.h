// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zigbee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zigbee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zigbee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zigbee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zigbee_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zigbee_2eproto;
class SwZb_t;
struct SwZb_tDefaultTypeInternal;
extern SwZb_tDefaultTypeInternal _SwZb_t_default_instance_;
class Zigbee_t;
struct Zigbee_tDefaultTypeInternal;
extern Zigbee_tDefaultTypeInternal _Zigbee_t_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SwZb_t* Arena::CreateMaybeMessage<::SwZb_t>(Arena*);
template<> ::Zigbee_t* Arena::CreateMaybeMessage<::Zigbee_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Zigbee_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Zigbee_t) */ {
 public:
  inline Zigbee_t() : Zigbee_t(nullptr) {}
  ~Zigbee_t() override;
  explicit PROTOBUF_CONSTEXPR Zigbee_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Zigbee_t(const Zigbee_t& from);
  Zigbee_t(Zigbee_t&& from) noexcept
    : Zigbee_t() {
    *this = ::std::move(from);
  }

  inline Zigbee_t& operator=(const Zigbee_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zigbee_t& operator=(Zigbee_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Zigbee_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Zigbee_t* internal_default_instance() {
    return reinterpret_cast<const Zigbee_t*>(
               &_Zigbee_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Zigbee_t& a, Zigbee_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Zigbee_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zigbee_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Zigbee_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Zigbee_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Zigbee_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Zigbee_t& from) {
    Zigbee_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zigbee_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Zigbee_t";
  }
  protected:
  explicit Zigbee_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwFieldNumber = 1,
    kSyncFieldNumber = 2,
  };
  // .SwZb_t sw = 1;
  bool has_sw() const;
  private:
  bool _internal_has_sw() const;
  public:
  void clear_sw();
  const ::SwZb_t& sw() const;
  PROTOBUF_NODISCARD ::SwZb_t* release_sw();
  ::SwZb_t* mutable_sw();
  void set_allocated_sw(::SwZb_t* sw);
  private:
  const ::SwZb_t& _internal_sw() const;
  ::SwZb_t* _internal_mutable_sw();
  public:
  void unsafe_arena_set_allocated_sw(
      ::SwZb_t* sw);
  ::SwZb_t* unsafe_arena_release_sw();

  // bool sync = 2;
  void clear_sync();
  bool sync() const;
  void set_sync(bool value);
  private:
  bool _internal_sync() const;
  void _internal_set_sync(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Zigbee_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SwZb_t* sw_;
    bool sync_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zigbee_2eproto;
};
// -------------------------------------------------------------------

class SwZb_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SwZb_t) */ {
 public:
  inline SwZb_t() : SwZb_t(nullptr) {}
  ~SwZb_t() override;
  explicit PROTOBUF_CONSTEXPR SwZb_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwZb_t(const SwZb_t& from);
  SwZb_t(SwZb_t&& from) noexcept
    : SwZb_t() {
    *this = ::std::move(from);
  }

  inline SwZb_t& operator=(const SwZb_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwZb_t& operator=(SwZb_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwZb_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwZb_t* internal_default_instance() {
    return reinterpret_cast<const SwZb_t*>(
               &_SwZb_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SwZb_t& a, SwZb_t& b) {
    a.Swap(&b);
  }
  inline void Swap(SwZb_t* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwZb_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwZb_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwZb_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwZb_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwZb_t& from) {
    SwZb_t::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwZb_t* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SwZb_t";
  }
  protected:
  explicit SwZb_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 15,
    kEndpointFieldNumber = 16,
    kStatusFieldNumber = 17,
  };
  // uint32 deviceID = 15;
  void clear_deviceid();
  uint32_t deviceid() const;
  void set_deviceid(uint32_t value);
  private:
  uint32_t _internal_deviceid() const;
  void _internal_set_deviceid(uint32_t value);
  public:

  // uint32 endpoint = 16;
  void clear_endpoint();
  uint32_t endpoint() const;
  void set_endpoint(uint32_t value);
  private:
  uint32_t _internal_endpoint() const;
  void _internal_set_endpoint(uint32_t value);
  public:

  // bool status = 17;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SwZb_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t deviceid_;
    uint32_t endpoint_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zigbee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Zigbee_t

// .SwZb_t sw = 1;
inline bool Zigbee_t::_internal_has_sw() const {
  return this != internal_default_instance() && _impl_.sw_ != nullptr;
}
inline bool Zigbee_t::has_sw() const {
  return _internal_has_sw();
}
inline void Zigbee_t::clear_sw() {
  if (GetArenaForAllocation() == nullptr && _impl_.sw_ != nullptr) {
    delete _impl_.sw_;
  }
  _impl_.sw_ = nullptr;
}
inline const ::SwZb_t& Zigbee_t::_internal_sw() const {
  const ::SwZb_t* p = _impl_.sw_;
  return p != nullptr ? *p : reinterpret_cast<const ::SwZb_t&>(
      ::_SwZb_t_default_instance_);
}
inline const ::SwZb_t& Zigbee_t::sw() const {
  // @@protoc_insertion_point(field_get:Zigbee_t.sw)
  return _internal_sw();
}
inline void Zigbee_t::unsafe_arena_set_allocated_sw(
    ::SwZb_t* sw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sw_);
  }
  _impl_.sw_ = sw;
  if (sw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Zigbee_t.sw)
}
inline ::SwZb_t* Zigbee_t::release_sw() {
  
  ::SwZb_t* temp = _impl_.sw_;
  _impl_.sw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SwZb_t* Zigbee_t::unsafe_arena_release_sw() {
  // @@protoc_insertion_point(field_release:Zigbee_t.sw)
  
  ::SwZb_t* temp = _impl_.sw_;
  _impl_.sw_ = nullptr;
  return temp;
}
inline ::SwZb_t* Zigbee_t::_internal_mutable_sw() {
  
  if (_impl_.sw_ == nullptr) {
    auto* p = CreateMaybeMessage<::SwZb_t>(GetArenaForAllocation());
    _impl_.sw_ = p;
  }
  return _impl_.sw_;
}
inline ::SwZb_t* Zigbee_t::mutable_sw() {
  ::SwZb_t* _msg = _internal_mutable_sw();
  // @@protoc_insertion_point(field_mutable:Zigbee_t.sw)
  return _msg;
}
inline void Zigbee_t::set_allocated_sw(::SwZb_t* sw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sw_;
  }
  if (sw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sw);
    if (message_arena != submessage_arena) {
      sw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sw_ = sw;
  // @@protoc_insertion_point(field_set_allocated:Zigbee_t.sw)
}

// bool sync = 2;
inline void Zigbee_t::clear_sync() {
  _impl_.sync_ = false;
}
inline bool Zigbee_t::_internal_sync() const {
  return _impl_.sync_;
}
inline bool Zigbee_t::sync() const {
  // @@protoc_insertion_point(field_get:Zigbee_t.sync)
  return _internal_sync();
}
inline void Zigbee_t::_internal_set_sync(bool value) {
  
  _impl_.sync_ = value;
}
inline void Zigbee_t::set_sync(bool value) {
  _internal_set_sync(value);
  // @@protoc_insertion_point(field_set:Zigbee_t.sync)
}

// -------------------------------------------------------------------

// SwZb_t

// uint32 deviceID = 15;
inline void SwZb_t::clear_deviceid() {
  _impl_.deviceid_ = 0u;
}
inline uint32_t SwZb_t::_internal_deviceid() const {
  return _impl_.deviceid_;
}
inline uint32_t SwZb_t::deviceid() const {
  // @@protoc_insertion_point(field_get:SwZb_t.deviceID)
  return _internal_deviceid();
}
inline void SwZb_t::_internal_set_deviceid(uint32_t value) {
  
  _impl_.deviceid_ = value;
}
inline void SwZb_t::set_deviceid(uint32_t value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:SwZb_t.deviceID)
}

// uint32 endpoint = 16;
inline void SwZb_t::clear_endpoint() {
  _impl_.endpoint_ = 0u;
}
inline uint32_t SwZb_t::_internal_endpoint() const {
  return _impl_.endpoint_;
}
inline uint32_t SwZb_t::endpoint() const {
  // @@protoc_insertion_point(field_get:SwZb_t.endpoint)
  return _internal_endpoint();
}
inline void SwZb_t::_internal_set_endpoint(uint32_t value) {
  
  _impl_.endpoint_ = value;
}
inline void SwZb_t::set_endpoint(uint32_t value) {
  _internal_set_endpoint(value);
  // @@protoc_insertion_point(field_set:SwZb_t.endpoint)
}

// bool status = 17;
inline void SwZb_t::clear_status() {
  _impl_.status_ = false;
}
inline bool SwZb_t::_internal_status() const {
  return _impl_.status_;
}
inline bool SwZb_t::status() const {
  // @@protoc_insertion_point(field_get:SwZb_t.status)
  return _internal_status();
}
inline void SwZb_t::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void SwZb_t::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SwZb_t.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zigbee_2eproto
