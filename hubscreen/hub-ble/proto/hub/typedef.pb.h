// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: typedef.proto

#ifndef PROTOBUF_INCLUDED_typedef_2eproto
#define PROTOBUF_INCLUDED_typedef_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_typedef_2eproto 

namespace protobuf_typedef_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_typedef_2eproto
class Buffer;
class BufferDefaultTypeInternal;
extern BufferDefaultTypeInternal _Buffer_default_instance_;
class KeepAlive_t;
class KeepAlive_tDefaultTypeInternal;
extern KeepAlive_tDefaultTypeInternal _KeepAlive_t_default_instance_;
class Led_t;
class Led_tDefaultTypeInternal;
extern Led_tDefaultTypeInternal _Led_t_default_instance_;
class Ota_t;
class Ota_tDefaultTypeInternal;
extern Ota_tDefaultTypeInternal _Ota_t_default_instance_;
class Sw_t;
class Sw_tDefaultTypeInternal;
extern Sw_tDefaultTypeInternal _Sw_t_default_instance_;
class Sync_t;
class Sync_tDefaultTypeInternal;
extern Sync_tDefaultTypeInternal _Sync_t_default_instance_;
class Timer_t;
class Timer_tDefaultTypeInternal;
extern Timer_tDefaultTypeInternal _Timer_t_default_instance_;
class Vendor_t;
class Vendor_tDefaultTypeInternal;
extern Vendor_tDefaultTypeInternal _Vendor_t_default_instance_;
class Vpn_t;
class Vpn_tDefaultTypeInternal;
extern Vpn_tDefaultTypeInternal _Vpn_t_default_instance_;
namespace google {
namespace protobuf {
template<> ::Buffer* Arena::CreateMaybeMessage<::Buffer>(Arena*);
template<> ::KeepAlive_t* Arena::CreateMaybeMessage<::KeepAlive_t>(Arena*);
template<> ::Led_t* Arena::CreateMaybeMessage<::Led_t>(Arena*);
template<> ::Ota_t* Arena::CreateMaybeMessage<::Ota_t>(Arena*);
template<> ::Sw_t* Arena::CreateMaybeMessage<::Sw_t>(Arena*);
template<> ::Sync_t* Arena::CreateMaybeMessage<::Sync_t>(Arena*);
template<> ::Timer_t* Arena::CreateMaybeMessage<::Timer_t>(Arena*);
template<> ::Vendor_t* Arena::CreateMaybeMessage<::Vendor_t>(Arena*);
template<> ::Vpn_t* Arena::CreateMaybeMessage<::Vpn_t>(Arena*);
}  // namespace protobuf
}  // namespace google

enum User_t {
  App = 0,
  Server = 1,
  Hub = 2,
  Zigbee = 3,
  Ble = 4,
  Ai = 5,
  Wifi = 6,
  Screen = 7,
  Ota = 8,
  User_t_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  User_t_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool User_t_IsValid(int value);
const User_t User_t_MIN = App;
const User_t User_t_MAX = Ota;
const int User_t_ARRAYSIZE = User_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* User_t_descriptor();
inline const ::std::string& User_t_Name(User_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    User_t_descriptor(), value);
}
inline bool User_t_Parse(
    const ::std::string& name, User_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<User_t>(
    User_t_descriptor(), name, value);
}
// ===================================================================

class Led_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Led_t) */ {
 public:
  Led_t();
  virtual ~Led_t();

  Led_t(const Led_t& from);

  inline Led_t& operator=(const Led_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Led_t(Led_t&& from) noexcept
    : Led_t() {
    *this = ::std::move(from);
  }

  inline Led_t& operator=(Led_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Led_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Led_t* internal_default_instance() {
    return reinterpret_cast<const Led_t*>(
               &_Led_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Led_t* other);
  friend void swap(Led_t& a, Led_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Led_t* New() const final {
    return CreateMaybeMessage<Led_t>(NULL);
  }

  Led_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Led_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Led_t& from);
  void MergeFrom(const Led_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Led_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 16;
  void clear_name();
  static const int kNameFieldNumber = 16;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 mac = 17;
  void clear_mac();
  static const int kMacFieldNumber = 17;
  ::google::protobuf::uint64 mac() const;
  void set_mac(::google::protobuf::uint64 value);

  // uint32 ep = 18;
  void clear_ep();
  static const int kEpFieldNumber = 18;
  ::google::protobuf::uint32 ep() const;
  void set_ep(::google::protobuf::uint32 value);

  // bool status = 19;
  void clear_status();
  static const int kStatusFieldNumber = 19;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:Led_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 mac_;
  ::google::protobuf::uint32 ep_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sync_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Sync_t) */ {
 public:
  Sync_t();
  virtual ~Sync_t();

  Sync_t(const Sync_t& from);

  inline Sync_t& operator=(const Sync_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sync_t(Sync_t&& from) noexcept
    : Sync_t() {
    *this = ::std::move(from);
  }

  inline Sync_t& operator=(Sync_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sync_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sync_t* internal_default_instance() {
    return reinterpret_cast<const Sync_t*>(
               &_Sync_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Sync_t* other);
  friend void swap(Sync_t& a, Sync_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sync_t* New() const final {
    return CreateMaybeMessage<Sync_t>(NULL);
  }

  Sync_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sync_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sync_t& from);
  void MergeFrom(const Sync_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sync_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool add = 16;
  void clear_add();
  static const int kAddFieldNumber = 16;
  bool add() const;
  void set_add(bool value);

  // bool remove = 17;
  void clear_remove();
  static const int kRemoveFieldNumber = 17;
  bool remove() const;
  void set_remove(bool value);

  // bool sync = 18;
  void clear_sync();
  static const int kSyncFieldNumber = 18;
  bool sync() const;
  void set_sync(bool value);

  // @@protoc_insertion_point(class_scope:Sync_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool add_;
  bool remove_;
  bool sync_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sw_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Sw_t) */ {
 public:
  Sw_t();
  virtual ~Sw_t();

  Sw_t(const Sw_t& from);

  inline Sw_t& operator=(const Sw_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sw_t(Sw_t&& from) noexcept
    : Sw_t() {
    *this = ::std::move(from);
  }

  inline Sw_t& operator=(Sw_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sw_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sw_t* internal_default_instance() {
    return reinterpret_cast<const Sw_t*>(
               &_Sw_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Sw_t* other);
  friend void swap(Sw_t& a, Sw_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sw_t* New() const final {
    return CreateMaybeMessage<Sw_t>(NULL);
  }

  Sw_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sw_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sw_t& from);
  void MergeFrom(const Sw_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sw_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 16;
  void clear_name();
  static const int kNameFieldNumber = 16;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 mac = 18;
  void clear_mac();
  static const int kMacFieldNumber = 18;
  ::google::protobuf::uint64 mac() const;
  void set_mac(::google::protobuf::uint64 value);

  // uint32 ep = 17;
  void clear_ep();
  static const int kEpFieldNumber = 17;
  ::google::protobuf::uint32 ep() const;
  void set_ep(::google::protobuf::uint32 value);

  // bool status = 19;
  void clear_status();
  static const int kStatusFieldNumber = 19;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:Sw_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 mac_;
  ::google::protobuf::uint32 ep_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ota_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ota_t) */ {
 public:
  Ota_t();
  virtual ~Ota_t();

  Ota_t(const Ota_t& from);

  inline Ota_t& operator=(const Ota_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ota_t(Ota_t&& from) noexcept
    : Ota_t() {
    *this = ::std::move(from);
  }

  inline Ota_t& operator=(Ota_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ota_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ota_t* internal_default_instance() {
    return reinterpret_cast<const Ota_t*>(
               &_Ota_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Ota_t* other);
  friend void swap(Ota_t& a, Ota_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ota_t* New() const final {
    return CreateMaybeMessage<Ota_t>(NULL);
  }

  Ota_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ota_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ota_t& from);
  void MergeFrom(const Ota_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ota_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool check_ota = 16;
  void clear_check_ota();
  static const int kCheckOtaFieldNumber = 16;
  bool check_ota() const;
  void set_check_ota(bool value);

  // bool status = 17;
  void clear_status();
  static const int kStatusFieldNumber = 17;
  bool status() const;
  void set_status(bool value);

  // bool ack = 18;
  void clear_ack();
  static const int kAckFieldNumber = 18;
  bool ack() const;
  void set_ack(bool value);

  // @@protoc_insertion_point(class_scope:Ota_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool check_ota_;
  bool status_;
  bool ack_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeepAlive_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KeepAlive_t) */ {
 public:
  KeepAlive_t();
  virtual ~KeepAlive_t();

  KeepAlive_t(const KeepAlive_t& from);

  inline KeepAlive_t& operator=(const KeepAlive_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeepAlive_t(KeepAlive_t&& from) noexcept
    : KeepAlive_t() {
    *this = ::std::move(from);
  }

  inline KeepAlive_t& operator=(KeepAlive_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeepAlive_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeepAlive_t* internal_default_instance() {
    return reinterpret_cast<const KeepAlive_t*>(
               &_KeepAlive_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(KeepAlive_t* other);
  friend void swap(KeepAlive_t& a, KeepAlive_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeepAlive_t* New() const final {
    return CreateMaybeMessage<KeepAlive_t>(NULL);
  }

  KeepAlive_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeepAlive_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeepAlive_t& from);
  void MergeFrom(const KeepAlive_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAlive_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .User_t sender = 1;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  ::User_t sender() const;
  void set_sender(::User_t value);

  // @@protoc_insertion_point(class_scope:KeepAlive_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int sender_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Timer_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Timer_t) */ {
 public:
  Timer_t();
  virtual ~Timer_t();

  Timer_t(const Timer_t& from);

  inline Timer_t& operator=(const Timer_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timer_t(Timer_t&& from) noexcept
    : Timer_t() {
    *this = ::std::move(from);
  }

  inline Timer_t& operator=(Timer_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timer_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timer_t* internal_default_instance() {
    return reinterpret_cast<const Timer_t*>(
               &_Timer_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Timer_t* other);
  friend void swap(Timer_t& a, Timer_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timer_t* New() const final {
    return CreateMaybeMessage<Timer_t>(NULL);
  }

  Timer_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timer_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timer_t& from);
  void MergeFrom(const Timer_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timer_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 day = 15;
  void clear_day();
  static const int kDayFieldNumber = 15;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // uint32 month = 16;
  void clear_month();
  static const int kMonthFieldNumber = 16;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 hour = 17;
  void clear_hour();
  static const int kHourFieldNumber = 17;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 minute = 18;
  void clear_minute();
  static const int kMinuteFieldNumber = 18;
  ::google::protobuf::uint32 minute() const;
  void set_minute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Timer_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Buffer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Buffer) */ {
 public:
  Buffer();
  virtual ~Buffer();

  Buffer(const Buffer& from);

  inline Buffer& operator=(const Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Buffer(Buffer&& from) noexcept
    : Buffer() {
    *this = ::std::move(from);
  }

  inline Buffer& operator=(Buffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Buffer* internal_default_instance() {
    return reinterpret_cast<const Buffer*>(
               &_Buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Buffer* other);
  friend void swap(Buffer& a, Buffer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Buffer* New() const final {
    return CreateMaybeMessage<Buffer>(NULL);
  }

  Buffer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Buffer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Buffer& from);
  void MergeFrom(const Buffer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Buffer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Led_t led = 18;
  int led_size() const;
  void clear_led();
  static const int kLedFieldNumber = 18;
  ::Led_t* mutable_led(int index);
  ::google::protobuf::RepeatedPtrField< ::Led_t >*
      mutable_led();
  const ::Led_t& led(int index) const;
  ::Led_t* add_led();
  const ::google::protobuf::RepeatedPtrField< ::Led_t >&
      led() const;

  // repeated .Sw_t sw = 19;
  int sw_size() const;
  void clear_sw();
  static const int kSwFieldNumber = 19;
  ::Sw_t* mutable_sw(int index);
  ::google::protobuf::RepeatedPtrField< ::Sw_t >*
      mutable_sw();
  const ::Sw_t& sw(int index) const;
  ::Sw_t* add_sw();
  const ::google::protobuf::RepeatedPtrField< ::Sw_t >&
      sw() const;

  // string mac_hub = 1;
  void clear_mac_hub();
  static const int kMacHubFieldNumber = 1;
  const ::std::string& mac_hub() const;
  void set_mac_hub(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_hub(::std::string&& value);
  #endif
  void set_mac_hub(const char* value);
  void set_mac_hub(const char* value, size_t size);
  ::std::string* mutable_mac_hub();
  ::std::string* release_mac_hub();
  void set_allocated_mac_hub(::std::string* mac_hub);

  // .Sync_t sync = 5;
  bool has_sync() const;
  void clear_sync();
  static const int kSyncFieldNumber = 5;
  private:
  const ::Sync_t& _internal_sync() const;
  public:
  const ::Sync_t& sync() const;
  ::Sync_t* release_sync();
  ::Sync_t* mutable_sync();
  void set_allocated_sync(::Sync_t* sync);

  // .Ota_t ota = 16;
  bool has_ota() const;
  void clear_ota();
  static const int kOtaFieldNumber = 16;
  private:
  const ::Ota_t& _internal_ota() const;
  public:
  const ::Ota_t& ota() const;
  ::Ota_t* release_ota();
  ::Ota_t* mutable_ota();
  void set_allocated_ota(::Ota_t* ota);

  // .Vpn_t vpn = 17;
  bool has_vpn() const;
  void clear_vpn();
  static const int kVpnFieldNumber = 17;
  private:
  const ::Vpn_t& _internal_vpn() const;
  public:
  const ::Vpn_t& vpn() const;
  ::Vpn_t* release_vpn();
  ::Vpn_t* mutable_vpn();
  void set_allocated_vpn(::Vpn_t* vpn);

  // .Timer_t time = 20;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 20;
  private:
  const ::Timer_t& _internal_time() const;
  public:
  const ::Timer_t& time() const;
  ::Timer_t* release_time();
  ::Timer_t* mutable_time();
  void set_allocated_time(::Timer_t* time);

  // .User_t sender = 2;
  void clear_sender();
  static const int kSenderFieldNumber = 2;
  ::User_t sender() const;
  void set_sender(::User_t value);

  // .User_t receiver = 3;
  void clear_receiver();
  static const int kReceiverFieldNumber = 3;
  ::User_t receiver() const;
  void set_receiver(::User_t value);

  // .User_t cotroller = 4;
  void clear_cotroller();
  static const int kCotrollerFieldNumber = 4;
  ::User_t cotroller() const;
  void set_cotroller(::User_t value);

  // @@protoc_insertion_point(class_scope:Buffer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Led_t > led_;
  ::google::protobuf::RepeatedPtrField< ::Sw_t > sw_;
  ::google::protobuf::internal::ArenaStringPtr mac_hub_;
  ::Sync_t* sync_;
  ::Ota_t* ota_;
  ::Vpn_t* vpn_;
  ::Timer_t* time_;
  int sender_;
  int receiver_;
  int cotroller_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vpn_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vpn_t) */ {
 public:
  Vpn_t();
  virtual ~Vpn_t();

  Vpn_t(const Vpn_t& from);

  inline Vpn_t& operator=(const Vpn_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vpn_t(Vpn_t&& from) noexcept
    : Vpn_t() {
    *this = ::std::move(from);
  }

  inline Vpn_t& operator=(Vpn_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vpn_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vpn_t* internal_default_instance() {
    return reinterpret_cast<const Vpn_t*>(
               &_Vpn_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Vpn_t* other);
  friend void swap(Vpn_t& a, Vpn_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vpn_t* New() const final {
    return CreateMaybeMessage<Vpn_t>(NULL);
  }

  Vpn_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vpn_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vpn_t& from);
  void MergeFrom(const Vpn_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vpn_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mac = 2;
  void clear_mac();
  static const int kMacFieldNumber = 2;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:Vpn_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vendor_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vendor_t) */ {
 public:
  Vendor_t();
  virtual ~Vendor_t();

  Vendor_t(const Vendor_t& from);

  inline Vendor_t& operator=(const Vendor_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vendor_t(Vendor_t&& from) noexcept
    : Vendor_t() {
    *this = ::std::move(from);
  }

  inline Vendor_t& operator=(Vendor_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vendor_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vendor_t* internal_default_instance() {
    return reinterpret_cast<const Vendor_t*>(
               &_Vendor_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Vendor_t* other);
  friend void swap(Vendor_t& a, Vendor_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vendor_t* New() const final {
    return CreateMaybeMessage<Vendor_t>(NULL);
  }

  Vendor_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vendor_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vendor_t& from);
  void MergeFrom(const Vendor_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vendor_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mac_ven = 1;
  void clear_mac_ven();
  static const int kMacVenFieldNumber = 1;
  const ::std::string& mac_ven() const;
  void set_mac_ven(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_ven(::std::string&& value);
  #endif
  void set_mac_ven(const char* value);
  void set_mac_ven(const char* value, size_t size);
  ::std::string* mutable_mac_ven();
  ::std::string* release_mac_ven();
  void set_allocated_mac_ven(::std::string* mac_ven);

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bool status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:Vendor_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mac_ven_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Led_t

// string name = 16;
inline void Led_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Led_t::name() const {
  // @@protoc_insertion_point(field_get:Led_t.name)
  return name_.GetNoArena();
}
inline void Led_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Led_t.name)
}
#if LANG_CXX11
inline void Led_t::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Led_t.name)
}
#endif
inline void Led_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Led_t.name)
}
inline void Led_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Led_t.name)
}
inline ::std::string* Led_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Led_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Led_t::release_name() {
  // @@protoc_insertion_point(field_release:Led_t.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Led_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Led_t.name)
}

// uint64 mac = 17;
inline void Led_t::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Led_t::mac() const {
  // @@protoc_insertion_point(field_get:Led_t.mac)
  return mac_;
}
inline void Led_t::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:Led_t.mac)
}

// uint32 ep = 18;
inline void Led_t::clear_ep() {
  ep_ = 0u;
}
inline ::google::protobuf::uint32 Led_t::ep() const {
  // @@protoc_insertion_point(field_get:Led_t.ep)
  return ep_;
}
inline void Led_t::set_ep(::google::protobuf::uint32 value) {
  
  ep_ = value;
  // @@protoc_insertion_point(field_set:Led_t.ep)
}

// bool status = 19;
inline void Led_t::clear_status() {
  status_ = false;
}
inline bool Led_t::status() const {
  // @@protoc_insertion_point(field_get:Led_t.status)
  return status_;
}
inline void Led_t::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Led_t.status)
}

// -------------------------------------------------------------------

// Sync_t

// bool add = 16;
inline void Sync_t::clear_add() {
  add_ = false;
}
inline bool Sync_t::add() const {
  // @@protoc_insertion_point(field_get:Sync_t.add)
  return add_;
}
inline void Sync_t::set_add(bool value) {
  
  add_ = value;
  // @@protoc_insertion_point(field_set:Sync_t.add)
}

// bool remove = 17;
inline void Sync_t::clear_remove() {
  remove_ = false;
}
inline bool Sync_t::remove() const {
  // @@protoc_insertion_point(field_get:Sync_t.remove)
  return remove_;
}
inline void Sync_t::set_remove(bool value) {
  
  remove_ = value;
  // @@protoc_insertion_point(field_set:Sync_t.remove)
}

// bool sync = 18;
inline void Sync_t::clear_sync() {
  sync_ = false;
}
inline bool Sync_t::sync() const {
  // @@protoc_insertion_point(field_get:Sync_t.sync)
  return sync_;
}
inline void Sync_t::set_sync(bool value) {
  
  sync_ = value;
  // @@protoc_insertion_point(field_set:Sync_t.sync)
}

// -------------------------------------------------------------------

// Sw_t

// string name = 16;
inline void Sw_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sw_t::name() const {
  // @@protoc_insertion_point(field_get:Sw_t.name)
  return name_.GetNoArena();
}
inline void Sw_t::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Sw_t.name)
}
#if LANG_CXX11
inline void Sw_t::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Sw_t.name)
}
#endif
inline void Sw_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Sw_t.name)
}
inline void Sw_t::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Sw_t.name)
}
inline ::std::string* Sw_t::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Sw_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sw_t::release_name() {
  // @@protoc_insertion_point(field_release:Sw_t.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sw_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Sw_t.name)
}

// uint32 ep = 17;
inline void Sw_t::clear_ep() {
  ep_ = 0u;
}
inline ::google::protobuf::uint32 Sw_t::ep() const {
  // @@protoc_insertion_point(field_get:Sw_t.ep)
  return ep_;
}
inline void Sw_t::set_ep(::google::protobuf::uint32 value) {
  
  ep_ = value;
  // @@protoc_insertion_point(field_set:Sw_t.ep)
}

// uint64 mac = 18;
inline void Sw_t::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Sw_t::mac() const {
  // @@protoc_insertion_point(field_get:Sw_t.mac)
  return mac_;
}
inline void Sw_t::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:Sw_t.mac)
}

// bool status = 19;
inline void Sw_t::clear_status() {
  status_ = false;
}
inline bool Sw_t::status() const {
  // @@protoc_insertion_point(field_get:Sw_t.status)
  return status_;
}
inline void Sw_t::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Sw_t.status)
}

// -------------------------------------------------------------------

// Ota_t

// bool check_ota = 16;
inline void Ota_t::clear_check_ota() {
  check_ota_ = false;
}
inline bool Ota_t::check_ota() const {
  // @@protoc_insertion_point(field_get:Ota_t.check_ota)
  return check_ota_;
}
inline void Ota_t::set_check_ota(bool value) {
  
  check_ota_ = value;
  // @@protoc_insertion_point(field_set:Ota_t.check_ota)
}

// bool status = 17;
inline void Ota_t::clear_status() {
  status_ = false;
}
inline bool Ota_t::status() const {
  // @@protoc_insertion_point(field_get:Ota_t.status)
  return status_;
}
inline void Ota_t::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Ota_t.status)
}

// bool ack = 18;
inline void Ota_t::clear_ack() {
  ack_ = false;
}
inline bool Ota_t::ack() const {
  // @@protoc_insertion_point(field_get:Ota_t.ack)
  return ack_;
}
inline void Ota_t::set_ack(bool value) {
  
  ack_ = value;
  // @@protoc_insertion_point(field_set:Ota_t.ack)
}

// -------------------------------------------------------------------

// KeepAlive_t

// .User_t sender = 1;
inline void KeepAlive_t::clear_sender() {
  sender_ = 0;
}
inline ::User_t KeepAlive_t::sender() const {
  // @@protoc_insertion_point(field_get:KeepAlive_t.sender)
  return static_cast< ::User_t >(sender_);
}
inline void KeepAlive_t::set_sender(::User_t value) {
  
  sender_ = value;
  // @@protoc_insertion_point(field_set:KeepAlive_t.sender)
}

// -------------------------------------------------------------------

// Timer_t

// uint32 day = 15;
inline void Timer_t::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 Timer_t::day() const {
  // @@protoc_insertion_point(field_get:Timer_t.day)
  return day_;
}
inline void Timer_t::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:Timer_t.day)
}

// uint32 month = 16;
inline void Timer_t::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 Timer_t::month() const {
  // @@protoc_insertion_point(field_get:Timer_t.month)
  return month_;
}
inline void Timer_t::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:Timer_t.month)
}

// uint32 hour = 17;
inline void Timer_t::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 Timer_t::hour() const {
  // @@protoc_insertion_point(field_get:Timer_t.hour)
  return hour_;
}
inline void Timer_t::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:Timer_t.hour)
}

// uint32 minute = 18;
inline void Timer_t::clear_minute() {
  minute_ = 0u;
}
inline ::google::protobuf::uint32 Timer_t::minute() const {
  // @@protoc_insertion_point(field_get:Timer_t.minute)
  return minute_;
}
inline void Timer_t::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:Timer_t.minute)
}

// -------------------------------------------------------------------

// Buffer

// string mac_hub = 1;
inline void Buffer::clear_mac_hub() {
  mac_hub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Buffer::mac_hub() const {
  // @@protoc_insertion_point(field_get:Buffer.mac_hub)
  return mac_hub_.GetNoArena();
}
inline void Buffer::set_mac_hub(const ::std::string& value) {
  
  mac_hub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Buffer.mac_hub)
}
#if LANG_CXX11
inline void Buffer::set_mac_hub(::std::string&& value) {
  
  mac_hub_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Buffer.mac_hub)
}
#endif
inline void Buffer::set_mac_hub(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_hub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Buffer.mac_hub)
}
inline void Buffer::set_mac_hub(const char* value, size_t size) {
  
  mac_hub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Buffer.mac_hub)
}
inline ::std::string* Buffer::mutable_mac_hub() {
  
  // @@protoc_insertion_point(field_mutable:Buffer.mac_hub)
  return mac_hub_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Buffer::release_mac_hub() {
  // @@protoc_insertion_point(field_release:Buffer.mac_hub)
  
  return mac_hub_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Buffer::set_allocated_mac_hub(::std::string* mac_hub) {
  if (mac_hub != NULL) {
    
  } else {
    
  }
  mac_hub_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_hub);
  // @@protoc_insertion_point(field_set_allocated:Buffer.mac_hub)
}

// .User_t sender = 2;
inline void Buffer::clear_sender() {
  sender_ = 0;
}
inline ::User_t Buffer::sender() const {
  // @@protoc_insertion_point(field_get:Buffer.sender)
  return static_cast< ::User_t >(sender_);
}
inline void Buffer::set_sender(::User_t value) {
  
  sender_ = value;
  // @@protoc_insertion_point(field_set:Buffer.sender)
}

// .User_t receiver = 3;
inline void Buffer::clear_receiver() {
  receiver_ = 0;
}
inline ::User_t Buffer::receiver() const {
  // @@protoc_insertion_point(field_get:Buffer.receiver)
  return static_cast< ::User_t >(receiver_);
}
inline void Buffer::set_receiver(::User_t value) {
  
  receiver_ = value;
  // @@protoc_insertion_point(field_set:Buffer.receiver)
}

// .User_t cotroller = 4;
inline void Buffer::clear_cotroller() {
  cotroller_ = 0;
}
inline ::User_t Buffer::cotroller() const {
  // @@protoc_insertion_point(field_get:Buffer.cotroller)
  return static_cast< ::User_t >(cotroller_);
}
inline void Buffer::set_cotroller(::User_t value) {
  
  cotroller_ = value;
  // @@protoc_insertion_point(field_set:Buffer.cotroller)
}

// .Sync_t sync = 5;
inline bool Buffer::has_sync() const {
  return this != internal_default_instance() && sync_ != NULL;
}
inline void Buffer::clear_sync() {
  if (GetArenaNoVirtual() == NULL && sync_ != NULL) {
    delete sync_;
  }
  sync_ = NULL;
}
inline const ::Sync_t& Buffer::_internal_sync() const {
  return *sync_;
}
inline const ::Sync_t& Buffer::sync() const {
  const ::Sync_t* p = sync_;
  // @@protoc_insertion_point(field_get:Buffer.sync)
  return p != NULL ? *p : *reinterpret_cast<const ::Sync_t*>(
      &::_Sync_t_default_instance_);
}
inline ::Sync_t* Buffer::release_sync() {
  // @@protoc_insertion_point(field_release:Buffer.sync)
  
  ::Sync_t* temp = sync_;
  sync_ = NULL;
  return temp;
}
inline ::Sync_t* Buffer::mutable_sync() {
  
  if (sync_ == NULL) {
    auto* p = CreateMaybeMessage<::Sync_t>(GetArenaNoVirtual());
    sync_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Buffer.sync)
  return sync_;
}
inline void Buffer::set_allocated_sync(::Sync_t* sync) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sync_;
  }
  if (sync) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sync = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    
  } else {
    
  }
  sync_ = sync;
  // @@protoc_insertion_point(field_set_allocated:Buffer.sync)
}

// .Ota_t ota = 16;
inline bool Buffer::has_ota() const {
  return this != internal_default_instance() && ota_ != NULL;
}
inline void Buffer::clear_ota() {
  if (GetArenaNoVirtual() == NULL && ota_ != NULL) {
    delete ota_;
  }
  ota_ = NULL;
}
inline const ::Ota_t& Buffer::_internal_ota() const {
  return *ota_;
}
inline const ::Ota_t& Buffer::ota() const {
  const ::Ota_t* p = ota_;
  // @@protoc_insertion_point(field_get:Buffer.ota)
  return p != NULL ? *p : *reinterpret_cast<const ::Ota_t*>(
      &::_Ota_t_default_instance_);
}
inline ::Ota_t* Buffer::release_ota() {
  // @@protoc_insertion_point(field_release:Buffer.ota)
  
  ::Ota_t* temp = ota_;
  ota_ = NULL;
  return temp;
}
inline ::Ota_t* Buffer::mutable_ota() {
  
  if (ota_ == NULL) {
    auto* p = CreateMaybeMessage<::Ota_t>(GetArenaNoVirtual());
    ota_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Buffer.ota)
  return ota_;
}
inline void Buffer::set_allocated_ota(::Ota_t* ota) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ota_;
  }
  if (ota) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ota = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ota, submessage_arena);
    }
    
  } else {
    
  }
  ota_ = ota;
  // @@protoc_insertion_point(field_set_allocated:Buffer.ota)
}

// .Vpn_t vpn = 17;
inline bool Buffer::has_vpn() const {
  return this != internal_default_instance() && vpn_ != NULL;
}
inline void Buffer::clear_vpn() {
  if (GetArenaNoVirtual() == NULL && vpn_ != NULL) {
    delete vpn_;
  }
  vpn_ = NULL;
}
inline const ::Vpn_t& Buffer::_internal_vpn() const {
  return *vpn_;
}
inline const ::Vpn_t& Buffer::vpn() const {
  const ::Vpn_t* p = vpn_;
  // @@protoc_insertion_point(field_get:Buffer.vpn)
  return p != NULL ? *p : *reinterpret_cast<const ::Vpn_t*>(
      &::_Vpn_t_default_instance_);
}
inline ::Vpn_t* Buffer::release_vpn() {
  // @@protoc_insertion_point(field_release:Buffer.vpn)
  
  ::Vpn_t* temp = vpn_;
  vpn_ = NULL;
  return temp;
}
inline ::Vpn_t* Buffer::mutable_vpn() {
  
  if (vpn_ == NULL) {
    auto* p = CreateMaybeMessage<::Vpn_t>(GetArenaNoVirtual());
    vpn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Buffer.vpn)
  return vpn_;
}
inline void Buffer::set_allocated_vpn(::Vpn_t* vpn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vpn_;
  }
  if (vpn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vpn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpn, submessage_arena);
    }
    
  } else {
    
  }
  vpn_ = vpn;
  // @@protoc_insertion_point(field_set_allocated:Buffer.vpn)
}

// repeated .Led_t led = 18;
inline int Buffer::led_size() const {
  return led_.size();
}
inline void Buffer::clear_led() {
  led_.Clear();
}
inline ::Led_t* Buffer::mutable_led(int index) {
  // @@protoc_insertion_point(field_mutable:Buffer.led)
  return led_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Led_t >*
Buffer::mutable_led() {
  // @@protoc_insertion_point(field_mutable_list:Buffer.led)
  return &led_;
}
inline const ::Led_t& Buffer::led(int index) const {
  // @@protoc_insertion_point(field_get:Buffer.led)
  return led_.Get(index);
}
inline ::Led_t* Buffer::add_led() {
  // @@protoc_insertion_point(field_add:Buffer.led)
  return led_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Led_t >&
Buffer::led() const {
  // @@protoc_insertion_point(field_list:Buffer.led)
  return led_;
}

// repeated .Sw_t sw = 19;
inline int Buffer::sw_size() const {
  return sw_.size();
}
inline void Buffer::clear_sw() {
  sw_.Clear();
}
inline ::Sw_t* Buffer::mutable_sw(int index) {
  // @@protoc_insertion_point(field_mutable:Buffer.sw)
  return sw_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Sw_t >*
Buffer::mutable_sw() {
  // @@protoc_insertion_point(field_mutable_list:Buffer.sw)
  return &sw_;
}
inline const ::Sw_t& Buffer::sw(int index) const {
  // @@protoc_insertion_point(field_get:Buffer.sw)
  return sw_.Get(index);
}
inline ::Sw_t* Buffer::add_sw() {
  // @@protoc_insertion_point(field_add:Buffer.sw)
  return sw_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sw_t >&
Buffer::sw() const {
  // @@protoc_insertion_point(field_list:Buffer.sw)
  return sw_;
}

// .Timer_t time = 20;
inline bool Buffer::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline void Buffer::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
inline const ::Timer_t& Buffer::_internal_time() const {
  return *time_;
}
inline const ::Timer_t& Buffer::time() const {
  const ::Timer_t* p = time_;
  // @@protoc_insertion_point(field_get:Buffer.time)
  return p != NULL ? *p : *reinterpret_cast<const ::Timer_t*>(
      &::_Timer_t_default_instance_);
}
inline ::Timer_t* Buffer::release_time() {
  // @@protoc_insertion_point(field_release:Buffer.time)
  
  ::Timer_t* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::Timer_t* Buffer::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::Timer_t>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Buffer.time)
  return time_;
}
inline void Buffer::set_allocated_time(::Timer_t* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:Buffer.time)
}

// -------------------------------------------------------------------

// Vpn_t

// bool status = 1;
inline void Vpn_t::clear_status() {
  status_ = false;
}
inline bool Vpn_t::status() const {
  // @@protoc_insertion_point(field_get:Vpn_t.status)
  return status_;
}
inline void Vpn_t::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Vpn_t.status)
}

// string mac = 2;
inline void Vpn_t::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vpn_t::mac() const {
  // @@protoc_insertion_point(field_get:Vpn_t.mac)
  return mac_.GetNoArena();
}
inline void Vpn_t::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vpn_t.mac)
}
#if LANG_CXX11
inline void Vpn_t::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vpn_t.mac)
}
#endif
inline void Vpn_t::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vpn_t.mac)
}
inline void Vpn_t::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vpn_t.mac)
}
inline ::std::string* Vpn_t::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:Vpn_t.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vpn_t::release_mac() {
  // @@protoc_insertion_point(field_release:Vpn_t.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vpn_t::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:Vpn_t.mac)
}

// -------------------------------------------------------------------

// Vendor_t

// string mac_ven = 1;
inline void Vendor_t::clear_mac_ven() {
  mac_ven_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vendor_t::mac_ven() const {
  // @@protoc_insertion_point(field_get:Vendor_t.mac_ven)
  return mac_ven_.GetNoArena();
}
inline void Vendor_t::set_mac_ven(const ::std::string& value) {
  
  mac_ven_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vendor_t.mac_ven)
}
#if LANG_CXX11
inline void Vendor_t::set_mac_ven(::std::string&& value) {
  
  mac_ven_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vendor_t.mac_ven)
}
#endif
inline void Vendor_t::set_mac_ven(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_ven_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vendor_t.mac_ven)
}
inline void Vendor_t::set_mac_ven(const char* value, size_t size) {
  
  mac_ven_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vendor_t.mac_ven)
}
inline ::std::string* Vendor_t::mutable_mac_ven() {
  
  // @@protoc_insertion_point(field_mutable:Vendor_t.mac_ven)
  return mac_ven_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vendor_t::release_mac_ven() {
  // @@protoc_insertion_point(field_release:Vendor_t.mac_ven)
  
  return mac_ven_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vendor_t::set_allocated_mac_ven(::std::string* mac_ven) {
  if (mac_ven != NULL) {
    
  } else {
    
  }
  mac_ven_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_ven);
  // @@protoc_insertion_point(field_set_allocated:Vendor_t.mac_ven)
}

// string data = 2;
inline void Vendor_t::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vendor_t::data() const {
  // @@protoc_insertion_point(field_get:Vendor_t.data)
  return data_.GetNoArena();
}
inline void Vendor_t::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Vendor_t.data)
}
#if LANG_CXX11
inline void Vendor_t::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Vendor_t.data)
}
#endif
inline void Vendor_t::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Vendor_t.data)
}
inline void Vendor_t::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Vendor_t.data)
}
inline ::std::string* Vendor_t::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Vendor_t.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vendor_t::release_data() {
  // @@protoc_insertion_point(field_release:Vendor_t.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vendor_t::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Vendor_t.data)
}

// bool status = 3;
inline void Vendor_t::clear_status() {
  status_ = false;
}
inline bool Vendor_t::status() const {
  // @@protoc_insertion_point(field_get:Vendor_t.status)
  return status_;
}
inline void Vendor_t::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Vendor_t.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::User_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::User_t>() {
  return ::User_t_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_typedef_2eproto
